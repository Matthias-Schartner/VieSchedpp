/*
 *  VieSched++ Very Long Baseline Interferometry (VLBI) Scheduling Software
 *  Copyright (C) 2018  Matthias Schartner
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "Ast.h"

using namespace VieVS;
using namespace std;

unsigned long Ast::nextId = 0;

Ast::Ast(const std::string &file): VieVS_Object(nextId++){
    of = ofstream(file);
}

void Ast::writeAstFile(const Network &network, const std::vector<Source> &sources, const std::vector<Scan> &scans,
                       const boost::property_tree::ptree &xml, const std::shared_ptr<const ObservingMode> &obsModes) {

    experiment(xml);

    for (unsigned long idx=0; idx<network.getNSta(); ++idx){
        const auto &station = network.getStation(idx);
        double mbps = obsModes->getMode(0)->recordingRate(idx);
        stationParameters(station,mbps);
    }
}

void Ast::experiment(const boost::property_tree::ptree &xml) {

    const string &expName = xml.get("VieSchedpp.general.experimentName","schedule");

    of << "# VLBI schedule in ast format\n";
    of << "#";

    string currentTimeString = xml.get<string>("VieSchedpp.created.time","");
    boost::posix_time::ptime currentTime;
    if(!currentTimeString.empty()){
        currentTime = TimeSystem::string2ptime(currentTimeString);
    }else{
        currentTime = boost::posix_time::second_clock::local_time();
    }
    of << "Generated on          " << TimeSystem::time2string_ast(TimeSystem::string2ptime(currentTimeString));
    of << "Generated by:         " << xml.get("VieSchedpp.created.name","unknown");
    of << "Generated with:       VieSched++    Version "  << util::version().substr(0,7) <<"\n";
    of << "#";


    of << boost::format("%28s %-6s\n") %"Experiment:"                          %expName;
    of << boost::format("  %26s %-6s    %s\n") %"Experiment_description:"      %expName %xml.get("VieSchedpp.output.experimentDescription","no further description");
    of << boost::format("  %26s %-6s    %s\n") %"Schedule_revision:"           %expName %"1";
    of << boost::format("  %26s %-6s    %s\n") %"Scheduler_name:"              %expName %xml.get("VieSchedpp.created.name","unknown");
    of << boost::format("  %26s %-6s    %s\n") %"Scheduler_email:"             %expName %xml.get("VieSchedpp.created.email","unknown");
    of << boost::format("  %26s %-6s    %s\n") %"Scheduler_phone:"             %expName %xml.get("VieSchedpp.created.phone","unknown");
    of << boost::format("  %26s %-6s    %s\n") %"Observer_phone:"              %expName %xml.get("VieSchedpp.observer.phone","unknown");
    of << boost::format("  %26s %-6s    %s.0 %s.0\n") %"UTC_experiment_dates:" %expName %TimeSystem::time2string_ast(TimeSystem::startTime) %TimeSystem::time2string_ast(TimeSystem::endTime);
    of << boost::format("  %26s %-6s    %s\n") %"Corr_spectral_resolution:"    %expName %"0.2500  MHz";
    of << boost::format("  %26s %-6s    %s\n") %"Corr_time_resolution:"        %expName %"1.000   sec";
    of << "#";

}

void Ast::stationParameters(const Station &station, double Mbps) {

    const string &staName = station.getName();
    const auto &position = station.getPosition();
    const auto &antenna = station.getAntenna();
    const auto &cableWrap = station.getCableWrap();
    const auto &equip = station.getEquip();

    of << boost::format("%28s %-6s    Short_name:    %s\n") %"Station_parameters:" %staName %station.getAlternativeName();
    of << boost::format("  %26s %-6s    %s\n") %"Last_update:"      %staName %"unknown";
    of << boost::format("  %26s %-6s    %11.3f   %11.3f   %11.3f meter \n") %"Coordinates:" %staName %position.getX() %position.getY() %position.getZ();
    string mount;
    of << boost::format("  %26s %-6s    %s\n") %"Mount:"      %staName %antenna.getMount();

    string ax1 = cableWrap.getMotions().first;
    if(ax1 == "az"){
        ax1 = "azimuth";
    }else if(ax1 == "ha"){
        ax1 = "hour_angle";
    }else if(ax1 == "x"){
        ax1 = "x";
    }else{
        ax1 = "unknown";
    }
    string ax2 = cableWrap.getMotions().first;
    if(ax2 == "el"){
        ax2 = "elevation";
    }else if(ax2 == "dec"){
        ax2 = "declination";
    }else if(ax2 == "yew"){
        ax2 = "yew";
    }else{
        ax2 = "unknown";
    }
    string tmp;
    tmp  = (boost::format("%7.1f %7.1f %7.1f %7.1f  deg")  %(cableWrap.getWLow()*deg2rad) %(cableWrap.getWUp()*deg2rad) %(cableWrap.getCLow()*deg2rad) %(cableWrap.getCUp()*deg2rad)).str();
    of << boost::format("  %26s %-6s    %36s  Axis : %s\n") %"1st_axis_range:" %tmp %staName %ax1;
    tmp = (boost::format("%7.1f %7.1f  deg")  %((cableWrap.getAxis2Low())) %(cableWrap.getAxis2Up()*deg2rad)).str();
    of << boost::format("  %26s %-6s    %36s  Axis : %s\n") %"2nd_axis_range:" %staName %tmp %ax2;

    tmp = (boost::format("%7.2f  deg/sec")  %(antenna.getRate1()*deg2rad)).str();
    of << boost::format("  %26s %-6s    %36s  Axis : %s\n") %"1st_axis_slewing_rate:" %staName %tmp %ax1;
    tmp = (boost::format("%7.2f  deg/sec")  %(antenna.getRate2()*deg2rad)).str();
    of << boost::format("  %26s %-6s    %36s  Axis : %s\n") %"2nd_axis_slewing_rate:" %staName %tmp %ax2;

    tmp = (boost::format("%7.2f  deg/sec*sec")  %(antenna.getRate1()*deg2rad)).str();
    of << boost::format("  %26s %-6s    %36s  Axis : %s\n") %"1st_axis_slewing_accl:" %staName %tmp %ax1;
    tmp = (boost::format("%7.2f  deg/sec*sec")  %(antenna.getRate2()*deg2rad)).str();
    of << boost::format("  %26s %-6s    %36s  Axis : %s\n") %"2nd_axis_slewing_accl:" %staName %tmp %ax2;

    tmp = (boost::format("%7.2f  deg/sec*sec")  %(antenna.getCon1()*deg2rad)).str();
    of << boost::format("  %26s %-6s    %36s  Axis : %s\n") %"1st_axis_settle_time:" %staName %tmp %ax1;
    tmp = (boost::format("%7.2f  deg/sec*sec")  %(antenna.getCon2()*deg2rad)).str();
    of << boost::format("  %26s %-6s    %36s  Axis : %s\n") %"2nd_axis_settle_time:" %staName %tmp %ax2;

    of << boost::format("  %26s %-6s    %d  sec\n") %"Preob_proc_duration:"   %staName %station.getWaittimes().preob;
    of << boost::format("  %26s %-6s    %d  sec\n") %"Postob_proc_duration:"  %staName %station.getWaittimes().postob;

    of << boost::format("  %26s %-6s    %s\n") %"Recorder:"              %staName %"unknown";
    of << boost::format("  %26s %-6s    %f  Gbps\n") %"Recording_rate:"        %staName %Mbps;

}

